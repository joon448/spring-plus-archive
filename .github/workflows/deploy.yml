name: Deploy to ECS

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECS_CLUSTER: plus-ecs-cluster
  ECS_SERVICE: plus-task-service-5ad7mssm
  ECR_REPOSITORY: plus-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Build JAR
        run: ./gradlew clean bootJar -x test

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::083880123810:role/GitHubActionsEcsDeployRole

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        run: |
          REG=${{ steps.ecr.outputs.registry }}
          IMAGE_URI=$REG/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # ▼ 콘솔의 현재 태스크 정의를 가져와서 image만 교체
      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition plus-task \
            --query taskDefinition > taskdef.json
          cat taskdef.json

      - name: Register new task definition with new image
        run: |
          NEW=$(jq --arg IMG "$IMAGE_URI" '
            .containerDefinitions |=
              (map(if .name=="app" then .image=$IMG else . end))
          ' taskdef.json)
          echo "$NEW" > new-taskdef.json

          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query taskDefinition.taskDefinitionArn --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_ENV
          echo "Registered: $ARN"

      - name: Update service (rolling deploy)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment